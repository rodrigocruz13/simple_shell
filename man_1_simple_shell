.\" HEADER
.Dd 15/4/19 \" DATE
.Dt HSH 1 \" Program name and manual section number









.\" NAME HEADER
.Sh NAME
.Nm hsh
.\" The following lines are read in generating the apropos(man -k) database.
.\" Use only key words here as the database is built based on the words here
.\" and in the .ND line.
.Nd (Shhhhean Connery) HSH - Shell.
.\" Use .Nm macro to designate other names for the documented program.








.\" SYNOPSIS HEADER
.Sh SYNOPSIS

.Op Fl abcd \" [-abcd]
.Op Fl a Ar path \" [-a path]
.Op Ar file \" [file]
.Op Ar \" [file ...]
.Ar arg0 \" Underlined arg - use .Ar anywhere to underline
arg2 ... \" Arguments








.\" COPYRIGHT HEADER
.Sh COPYRIGHT
hsh is Copyright (C) 2019-3019 by the R & R Software Foundation, Inc.







.\" DESCRIPTION HEADER
.Sh DESCRIPTION

hsh is an compatible command language interpreter that executes commands
read from the standard input or from a file. hsh also incorporates features
from C shells (ksh and csh).
.Pp
hsh is intended to be a conformant implementation of the Shell and Utilities
portion of the IEEE POSIX specification (IEEE Standard 1003.1). Bash can
be configured to be POSIX-conformant by default
.El








.\" ARGUMENTS HEADER
.Sh ARGUMENTS
The first argument is assumed to be the name of a file containing shell
commands.
If hsh is invoked in this fashion, $0 is set to the name of the file, and the
positional parameters are set to the remaining arguments. hsh reads and
executes commands from this file, then exits. hsh's exit status is the exit
status of the last command executed in the script. If no commands are executed,
the exit status is 0. An attempt is first made to open the file in the current
directory, and, if no file is found, then the shell searches the directories in
PATH for the script.







.\" DEFINITIONS HEADER
.Sh DEFINITIONS
The following definitions are used throughout the rest of this document.

.Bl
.It

- blank.
.It
A space or tab.
.It

- word.
.It
A sequence of characters considered as a single unit by the shell.
Also known as a token.

.It

- name.
.It
A word consisting only of alphanumeric characters and underscores,
and beginning with an alphabetic character or an underscore. Also referred to
as an identifier.
.It

- metacharacter.
.It
A character that, when unquoted, separates words. One of the following:
| & ; ( ) < > space tab
.It

- control operator
.It
A token that performs a control function. It is one of the following symbols:
|| & && ; ;; ( ) | <newline>

.El







.\" SHELL GRAMMAR HEADER
.Sh SHELL GRAMMAR

.Bl
.It
.Nd Simple Commands

.It
A simple command is a sequence of optional variable assignments followed by
blank-separated words and redirections, and terminated by a control operator.
The first word specifies the command to be executed, and is passed as argument
zero. The remaining words are passed as arguments to the invoked command.
The return value of a simple command is its exit status, or 128+n if the
command is terminated by signal n.
.El








.\" COMMAND EXECUTION HEADER
.Sh COMMAND EXECUTION

.Pp
After a command has been split into words, if it results in a simple command and
an optional list of arguments, the following actions are taken.
.Pp
If the command name contains no slashes, the shell attempts to locate it. If
there exists a shell function by that name, that function is invoked. If the
name does not match a function, the shell searches for it in the list of shell
builtins. If a match is found, that builtin is invoked.
.Pp
If the name is neither a shell function nor a builtin, and contains no slashes,
bash searches each element of the PATH for a directory containing an executable
file by that name. Bash uses a hash table to remember the full pathnames of
executable files (see hash under SHELL BUILTIN COMMANDS below). A full search of
the directories in PATH is performed only if the command is not found in the hash
table. If the search is unsuccessful, the shell prints an error message and
returns an exit status of 127.
.Pp
If the search is successful, or if the command name contains 1 or more slashes,
the shell executes the named program in a separate execution environment.
Argument 0 is set to the name given, and the remaining arguments to the command
are set to the arguments given, if any.
.Pp
If this execution fails because the file is not in executable format, and the
file is not a directory, it is assumed to be a shell script, a file containing
shell commands. A subshell is spawned to execute it. This subshell reinitializes
itself, so that the effect is as if a new shell had been invoked to handle the
script, with the exception that the locations of commands remembered by the
parent (see hash below under SHELL BUILTIN COMMANDS) are retained by the child.
.Pp
If the program is a file beginning with #!, the remainder of the first line
specifies an interpreter for the program. The shell executes the specified
interpreter on operating systems that do not handle this executable format
themselves. The arguments to the interpreter consist of a single optional
argument following the interpreter name on the first line of the program,
followed by the name of the program, followed by the command arguments, if any.
.Pp
.







.\" EXIT STATUS HEADER
.Sh EXIT STATUS

.Pp
For the shell's purposes, a command which exits with a zero exit status has
succeeded. An exit status of zero indicates success. A non-zero exit status
indicates failure. When a command terminates on a fatal signal N, bash uses the
value of 128+N as the exit status.
.Pp
If a command is not found, the child process created to execute it returns a
status of 127. If a command is found but is not executable, the return status
is 126.
.Pp
If a command fails because of an error during expansion or redirection, the exit
status is greater than zero.
.Pp
Shell builtin commands return a status of 0 (true) if successful, and non-zero
(false) if an error occurs while they execute. All builtins return an exit
status of 2 to indicate incorrect usage.







.\" SIGNALS HEADER
.Sh SIGNALS
.Pp
When bash is interactive, in the absence of any traps, it ignores SIGTERM (so
that kill 0 does not kill an interactive shell), and SIGINT is caught and
handled (so that the wait builtin is interruptible). In all cases, bash ignores
SIGQUIT. If job control is in effect, bash ignores SIGTTIN, SIGTTOU, and SIGTSTP
.Pp
Non-builtin commands run by bash have signal handlers set to the values
inherited by the shell from its parent. When job control is not in effect,
asynchronous commands ignore SIGINT and SIGQUIT in addition to these inherited
handlers. Commands run as a result of command substitution ignore the keyboard
generated job control signals SIGTTIN, SIGTTOU, and SIGTSTP







.\" FILES HEADER
.Sh FILES
.Bl -tag -width "/dir1/subdir1/subsbdir1/long_file_name" -compact
.It Pa /usr/share/main.c
main.c - Main file
.It Pa /Users/share/user/Library/really_long_file_name
FILE_2 description
.El \" Ends the list






.\" HISTORY HEADER
.Sh HISTORY \" Document history if command behaves in a unique manner

This program is in its version 1.0
It is generated in March 2019 and it was born as an academic exercise that seeks
to develop a program similar to a shell





.\" SEE ALSO HEADER
.Sh SEE ALSO
.\" List links in ascending order by section, alphabetically within a section.
.\" Please do not reference files that do not exist without filing a bug report
.Xr sh 1 ,
.Xr bash 2 ,
.Xr c 1







.\" BUGS HEADER
.Sh BUGS \" Document known, unremedied bugs
This program runs in a unique manner







.\" AUTHORS HEADER
.Sh AUTHORS

.Aq 654@holbertonschool.com
Ryan Hudson
.Pp

.Aq 754@holbertonschool.com
Rodrigo Cruz
.Pp
.


-

.SH COPYRIGHT 2019
